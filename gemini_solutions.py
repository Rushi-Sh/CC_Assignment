import google.generativeai as genai
import os
from dotenv import load_dotenv
import streamlit as st

# Load environment variables from .env file
load_dotenv()

# Configure the Gemini API with your API key
# You'll need to create a .env file with your GEMINI_API_KEY
api_key = os.getenv("GEMINI_API_KEY")
if api_key:
    genai.configure(api_key=api_key)
else:
    # For development, you can hardcode your API key here, but it's not recommended for production
    # genai.configure(api_key="your-api-key-here")
    pass

# Set up the model configuration
generation_config = {
    "temperature": 0.7,
    "top_p": 0.95,
    "top_k": 40,
    "max_output_tokens": 1024,
}

# Initialize the Gemini model
def initialize_model():
    try:
        model = genai.GenerativeModel(
            model_name="gemini-1.5-pro",
            generation_config=generation_config
        )
        return model
    except Exception as e:
        st.error(f"Error initializing Gemini model: {str(e)}")
        return None

# Generate solutions for a detected disease
def get_disease_solution(disease_name, confidence_score=None):
    model = initialize_model()
    
    if not model:
        return {
            "success": False,
            "error": "Gemini API not configured. Please add your API key to the .env file.",
            "fallback_solution": get_fallback_solution(disease_name)
        }
    
    try:
        # Create a prompt for the Gemini model
        prompt = f"""
        As an agricultural expert, provide detailed advice for a farmer who has detected {disease_name} in their crop.
        
        Please structure your response with the following sections:
        1. Brief description of {disease_name}
        2. Common causes
        3. Immediate actions to take
        4. Treatment options (both organic and chemical)
        5. Prevention strategies for the future
        
        Make your advice practical, actionable, and suitable for farmers with varying levels of expertise.
        """
        
        # Generate the response
        response = model.generate_content(prompt)
        
        # Return the structured solution
        return {
            "success": True,
            "disease": disease_name,
            "confidence": confidence_score,
            "solution": response.text,
            "source": "Generated by Google Gemini AI"  # Added the missing source key
        }
    
    except Exception as e:
        # If Gemini API fails, return a fallback solution
        return {
            "success": False,
            "error": str(e),
            "fallback_solution": get_fallback_solution(disease_name)
        }

# Provide fallback solutions for common plant diseases in case the API fails
def get_fallback_solution(disease_name):
    # Dictionary of common plant diseases and their solutions
    common_solutions = {
        "Tomato Late Blight": {
            "description": "A destructive disease caused by the fungus-like oomycete Phytophthora infestans.",
            "causes": "Cool, wet weather; poor air circulation; infected plant debris.",
            "immediate_actions": "Remove and destroy infected plants; improve air circulation.",
            "treatments": "Copper-based fungicides; organic options include copper soap and neem oil.",
            "prevention": "Use resistant varieties; practice crop rotation; avoid overhead watering."
        },
        "Powdery Mildew": {
            "description": "A fungal disease that appears as white powdery spots on leaves and stems.",
            "causes": "High humidity; poor air circulation; overcrowded plants.",
            "immediate_actions": "Remove severely infected leaves; improve spacing between plants.",
            "treatments": "Sulfur-based fungicides; baking soda solution (1 tbsp in 1 gallon water with a few drops of soap).",
            "prevention": "Plant resistant varieties; ensure good air circulation; avoid overhead watering."
        },
        "Apple Scab": {
            "description": "A fungal disease causing dark, scabby lesions on apple fruit and leaves.",
            "causes": "Wet spring weather; fungal spores from leaf debris.",
            "immediate_actions": "Remove and destroy fallen leaves; prune for better air circulation.",
            "treatments": "Lime sulfur sprays; organic options include neem oil and compost tea.",
            "prevention": "Plant resistant varieties; rake and destroy fallen leaves; proper pruning."
        }
    }
    
    # Return the solution if available, otherwise return a generic solution
    if disease_name in common_solutions:
        solution = common_solutions[disease_name]
        return f"""
        # {disease_name}
        
        ## Description
        {solution['description']}
        
        ## Common Causes
        {solution['causes']}
        
        ## Immediate Actions
        {solution['immediate_actions']}
        
        ## Treatment Options
        {solution['treatments']}
        
        ## Prevention
        {solution['prevention']}
        
        Note: This is a fallback solution provided when the AI service is unavailable.
        """
    else:
        return f"""
        # General Advice for {disease_name}
        
        ## Immediate Actions
        1. Remove and isolate infected plants or plant parts
        2. Improve air circulation around plants
        3. Avoid overhead watering
        
        ## Treatment Options
        1. Consider appropriate fungicides or bactericides based on the specific disease
        2. Organic options may include neem oil, copper soap, or sulfur-based products
        
        ## Prevention
        1. Practice crop rotation
        2. Use disease-resistant varieties when available
        3. Maintain proper plant spacing
        4. Clean tools between use
        
        Note: This is a general fallback solution. Please consult with a local agricultural extension office for specific advice.
        """

# Function to get solutions for multiple diseases
def get_batch_solutions(disease_list):
    solutions = {}
    for disease in disease_list:
        if disease not in solutions and disease != "Healthy":
            solutions[disease] = get_disease_solution(disease)
    return solutions

# Direct API key configuration for testing
genai.configure(api_key="AIzaSyDXjgxee4TDjBjf-9onS1x9YJ_4-FF5yNQ")